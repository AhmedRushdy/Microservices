parameters:
  - name: dockerServiceConnection
    type: string
    default: 'sc-acr-docker'
  - name: acrName
    type: string
    default: 'acrtaskpwc'                # <-- registry NAME only (no domain)
  - name: imageName
    type: string
    default: 'acrtaskpwc.azurecr.io/myflaskapp'  # full path is fine here
  - name: dockerfilePath
    type: string
    default: 'Dockerfile'
  - name: buildContext
    type: string
    default: '.'
  - name: registryName
    type: string
    default: 'acrtaskpwc.azurecr.io'     # login server (OK to keep for display)

stages:
- stage: BuildAndPush
  displayName: Build & Push Image
  jobs:
  - job: docker_build_push
    displayName: Docker build & push
    steps:
    - checkout: self
      fetchDepth: 0

    - template: step-resolve-tag.yaml

    - bash: |
        set -euo pipefail
        echo "Logging in to Azure with VM managed identity…"
        az login --identity 1>/dev/null

        echo "ACR docker login…"
        echo "Using registry: ${{ parameters.acrName }}"
        # Prefer standard login (talks to Docker). Falls back to token if needed.
        if ! az acr login -n ${{ parameters.acrName }} ; then
          echo "Falling back to token login…"
          LOGIN_SERVER=$(az acr show -n ${{ parameters.acrName }} --query loginServer -o tsv)
          TOKEN=$(az acr login -n ${{ parameters.acrName }} --expose-token --query accessToken -o tsv)
          echo "$TOKEN" | docker login "$LOGIN_SERVER" -u 00000000-0000-0000-0000-000000000000 --password-stdin
        fi
      displayName: "ACR login (Managed Identity)"

    - task: Docker@2
      displayName: Build & Push (immutable + env tag)
      inputs:
        command: buildAndPush
        repository: '${{ parameters.imageName }}'   # full name ok since we already did docker login
        dockerfile: '${{ parameters.dockerfilePath }}'
        buildContext: '${{ parameters.buildContext }}'
        # containerRegistry: '${{ parameters.dockerServiceConnection }}'  # not needed with MI login
        tags: |
          latest
